"""API routes for Analysis Service."""

from datetime import datetime
from typing import List, Optional
from uuid import UUID, uuid4

from fastapi import APIRouter, HTTPException, status

from app.schemas import (
    AnalysisListResponse,
    AnalysisRequest,
    AnalysisResponse,
    AnalysisStatusResponse,
)

router = APIRouter(prefix="/api/v1/analysis", tags=["Analysis"])

ANALYSIS_STORE: List[dict] = []
MAX_ANALYSES = 200


def _persist_analysis(entry: dict) -> AnalysisResponse:
    ANALYSIS_STORE.insert(0, entry)
    if len(ANALYSIS_STORE) > MAX_ANALYSES:
        ANALYSIS_STORE.pop()
    return AnalysisResponse(**entry)


def _get_analysis(analysis_id: UUID) -> dict:
    analysis = next((item for item in ANALYSIS_STORE if item["id"] == analysis_id), None)
    if not analysis:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Analysis not found")
    return analysis


@router.post("/analyze", response_model=AnalysisResponse, status_code=status.HTTP_201_CREATED)
async def create_analysis(request: AnalysisRequest):
    """Create and finish a mock analysis run."""
    analysis_id = uuid4()
    completed_at = datetime.utcnow()
    title = request.title or f"{request.analysis_type.title()} analysis"
    description = request.description or "Automated analysis generated by ComplianceIQ."

    analysis_entry = {
        "id": analysis_id,
        "instance_id": request.instance_id,
        "analysis_type": request.analysis_type,
        "status": "completed",
        "task_id": f"task-{uuid4()}",
        "created_at": completed_at,
        "completed_at": completed_at,
        "message": "Analysis completed successfully.",
        "title": title,
        "description": description,
    }
    return _persist_analysis(analysis_entry)


@router.get("/{analysis_id}", response_model=AnalysisResponse)
async def get_analysis(analysis_id: UUID):
    """Get analysis by ID."""
    analysis = _get_analysis(analysis_id)
    return AnalysisResponse(**analysis)


@router.get("/{analysis_id}/status", response_model=AnalysisStatusResponse)
async def get_analysis_status(analysis_id: UUID):
    """Get analysis status."""
    analysis = _get_analysis(analysis_id)
    progress = 100 if analysis["status"] == "completed" else 50
    return AnalysisStatusResponse(
        id=analysis_id,
        status=analysis["status"],
        progress=progress,
        message=analysis["message"],
    )


@router.get("/{analysis_id}/results")
async def get_analysis_results(analysis_id: UUID):
    """Get analysis results."""
    _get_analysis(analysis_id)
    return {
        "analysis_id": str(analysis_id),
        "status": "completed",
        "results": {
            "controls": [],
            "risks": [],
            "compliance": [],
        },
    }


@router.get("", response_model=AnalysisListResponse)
async def list_analyses(
    instance_id: Optional[UUID] = None,
    limit: int = 10,
):
    """List all analyses."""
    if instance_id:
        analyses = [AnalysisResponse(**a) for a in ANALYSIS_STORE if a["instance_id"] == instance_id][:limit]
    else:
        analyses = [AnalysisResponse(**a) for a in ANALYSIS_STORE][:limit]
    return AnalysisListResponse(analyses=analyses, total=len(analyses))
